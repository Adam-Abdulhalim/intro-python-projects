# -*- coding: utf-8 -*-
"""Project2-Abdulhalim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oU3H9sQ1dXwNYJh1gaBOrfJ8cl9gUiXH
"""

from google.colab import drive
drive.mount('/content/drive')

class State:
  def __init__(self, name, cap, reg, seats, pop, deaths, fvr, mhi, vcr):
    self.name = name
    self.cap = cap
    self.reg = reg
    self.seats = int(seats)
    self.pop = float(pop)
    self.deaths = float(deaths)
    self.fvr = float(fvr)/100
    self.mhi = float(mhi)
    self.vcr = float(vcr)

  def get_name(self):
    return self.name

  def set_name(self, name):
    self.name = name

  def get_capitol(self):
    return self.cap

  def set_capitol(self, cap):
    self.cap = cap

  def get_region(self):
    return self.reg

  def set_region(self, reg):
    self.reg = reg

  def get_seats(self):
    return self.seats

  def set_seats(self, seats):
    self.seats = seats

  def get_pop(self):
    return self.pop

  def set_pop(self, pop):
    self.pop = pop

  def get_deaths(self):
    return self.deaths

  def set_deaths(self, deaths):
    self.deaths = deaths

  def get_fvr(self):
    return self.fvr

  def set_fvr(self, fvr):
    self.fvr = fvr

  def get_mhi(self):
    return self.mhi

  def set_mhi(self, mhi):
    self.mhi = mhi

  def get_vcr(self):
    return self.vcr

  def set_vcr(self, vcr):
    self.vcr = vcr

  def __str__(self):
    return "{:<20} {:<20} {:<20.0f} {:<20.1f} {:<20.3f} {:<20.3f}".format(self.name, self.reg, self.mhi, self.vcr, (self.deaths/(self.pop/100000)), self.fvr)

  def __gt__(self, other):
    return self.name > other.name

def spearmans_rho(list1, list2, line_num):
  diff = []

  for index, state in enumerate(list1):
    for index2, state2 in enumerate(list2):
      if state2.name == state.name:
        d = (index - index2)
        diff.append(d)

  squared_diff = [number ** 2 for number in diff]
  all_diff = sum(squared_diff)
  rho = 1 - ((6 * all_diff)/(line_num * ((line_num ** 2) - 1)))
  return str(round(rho, 4))

filename = input("Enter name of file: \n")

state_list = []
menu = "0"
line_num = -1

try:
  with open("/"+filename) as file_object:
      for line in file_object:  
          
          if line_num == -1:
            line_num += 1
            continue
          
          data = line.strip().split(',')
          c = State(data[0], data[1], data[2], data[3], data[4], data[5], data[6], data[7], data[8])
          state_list.append(c)
          line_num += 1

  print("\n" + str(line_num) + " states were read from " + filename)

except FileNotFoundError:  
  print(f"\nSorry, the file {filename} does not exist.") 
  menu = "10"
  print("\nExiting program...")

while menu != "10":
  menu = input( "\nChoose a menu option 1-10...\n" +
                " 1) Print a State Report \n" +
                " 2) Sort by State Name \n" +
                " 3) Sort by Region \n" +
                " 4) Sort by COVID Death Rate \n" +
                " 5) Sort by Median Household Income \n" +
                " 6) Sort by Violent Crime Rate \n" +
                " 7) Sort by Full Vaccination Rate \n" +
                " 8) Find and print state for a given State Name \n" +
                " 9) Print Spearmanâ€™s Rho Correlation Matrix \n" +
                "10) Exit \n")
  
  if menu == "1":
    print('\033[1m' + "\nState                Region               MHI                  VCR                  Death Rate           FVR\n" + 
          "--------------------------------------------------------------------------------------------------------------" + '\033[0m')
    for state in state_list:
      print(state)

  elif menu == "2":
    state_list.sort(key=lambda state: (state.name))
    print("\nStates sorted by Name.")

  elif menu == "3":
    state_list.sort(key=lambda state: (state.reg, state.name))
    print("\nStates sorted by Region.")

  elif menu == "4":
    state_list.sort(key=lambda state: (state.deaths/(state.pop/100000), state.name))
    print("\nStates sorted by COVID Death Rate.")

  elif menu == "5":
    state_list.sort(key=lambda state: (state.mhi, state.name))
    print("\nStates sorted by Median Household Income.")

  elif menu == "6":
    state_list.sort(key=lambda state: (state.vcr, state.name))
    print("\nStates sorted by Violent Crime Rate.")

  elif menu == "7":
    state_list.sort(key=lambda state: (state.fvr, state.name))
    print("\nStates sorted by Full Vaccination Rate.")

  elif menu == "8":
    
    search_name = input("\nEnter State name: \n")
    count = 1
    
    for state in state_list:
      
      if search_name == state.name:
        print("\n\033[1mName:       " + state.name + "\n" +
        "Region:     " + state.reg + "\n" +
        "MHI:        " + str(round(state.mhi)) + "\n" +
        "VCR:        " + str(round(state.vcr, 1)) + "\n" +
        "Death Rate: " + str(round(state.deaths/(state.pop/100000), 3)) + "\n" +
        "FV Rate:    " + str(round(state.fvr, 3)) + "\033[0m")
        break
      
      count += 1
    
    if count == 51:
      print("\n\033[1mError: " + search_name + " not found\033[0m")

  elif menu == "9":

    mhi_list = sorted(state_list, key=lambda state: (state.mhi, state.name))
    vcr_list = sorted(state_list, key=lambda state: (state.vcr, state.name))
    fvr_list = sorted(state_list, key=lambda state: (state.fvr, state.name))
    death_list = sorted(state_list, key=lambda state: (state.deaths/(state.pop/100000), state.name))

    print("\n\033[1m" + "Spearman's Rho Matrix: ")
    print("-------------------------------------------------- ")
    print("|            |    MHI    |    VCR    |    FVR    | ")
    print("-------------------------------------------------- ")
    print("| Death Rate |  " + spearmans_rho(death_list, mhi_list, line_num) +
          "  |   " + spearmans_rho(death_list, vcr_list, line_num) + 
          "  |  " + spearmans_rho(death_list, fvr_list, line_num) + "  | ")
    print("-------------------------------------------------- \033[0m")

  elif menu == "10":
    print("\nExiting program...")

  else:
    print("\nInvalid menu option, try again!")

drive.flush_and_unmount()
print('All changes made in this colab session should now be visible in Drive.')