# -*- coding: utf-8 -*-
"""tictactoe-Abdulhalim.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qiUfrl4LQ8NEGclEite16DFGhR1iLBJv
"""

import json
import random

try:
  with open('/game_log.json') as f:
    #print("EXISTING FILE FOUND")
    all_data = json.load(f)
except FileNotFoundError as e:
  #print("NEW FILE WILL BE CREATED")
  all_data = {}

# NECESSARY GLOBAL VARIABLES
p_moves = []
comp_moves = []
available_moves = []
states = dict.fromkeys(['0,0', '0,1', '0,2', '1,0', '1,1', '1,2', '2,0', '2,1', '2,2'], ' ')
turn = 1 #player's turn
p_mark = ''
comp_mark = ''
possible_marks = ['X', 'O']
possible_coinsides = ['H', 'T']
p_m = ''
c_m = ''
winsets = [['0,0', '1,0', '2,0'], ['0,1', '1,1', '2,1'], ['0,2', '1,2', '2,2'], ['0,0', '0,1', '0,2'],
          ['1,0', '1,1', '1,2'], ['2,0', '2,1', '2,2'], ['0,0', '1,1', '2,2'], ['2,0', '1,1', '0,2']]
done = 0 #0 for not done with game, 1 for done with game

print("Welcome to Tic Tac Toe!\n")
player = input('Enter player name: ')
print("\nLoading...\n")

#NEW PLAYER
if player not in all_data:
    print("Seems you are a first time player.\n")
    print(f'Welcome, {player}!\n')
    all_data[player] = []
    all_data[player].append({"Win":0, "Loss":0, "Draw":0})
    all_data[player].append({"Unfinished":"None"})

    t = random.random()

    if t >= 0.5:
      heads = 1
      tails = 0
    else:
      heads = 0
      tails = 1

    while True:
      side = input("Type H for heads or T for tails, this coinflip will decide who goes first: ")
      if side not in possible_coinsides:
        print("\033[1m\nINVALID OPTION, MUST BE 'H' OR 'T'\n\033[0m")
        continue
      else:
        break

    if side == 'H':
      turn = heads
    else:
      turn = tails

    while True:
      p_mark = input("\nChoose either 'X' or 'O' as your mark: ")
      if p_mark not in possible_marks:
        print("\033[1m\nINVALID OPTION, MUST BE 'X' OR 'O'\033[0m")
        continue
      else:
        break

    if p_mark == 'O':
      comp_mark = 'X'
    else:
      comp_mark = 'O'

    for s in states:
      available_moves.append(s)

#RETURNING PLAYER
else:
    print(f'Welcome back, {player}!\n')
    print(f'Your record is W{all_data[player][0]["Win"]}'+
          f'-L{all_data[player][0]["Loss"]}-D{all_data[player][0]["Draw"]}\n')

    #RETURNING NEW GAME PLAYER
    if all_data[player][1]["Unfinished"] == "None":

      t = random.random()

      if t >= 0.5:
        heads = 1
        tails = 0
      else:
        heads = 0
        tails = 1

      while True:
        side = input("Type H for heads or T for tails, this coinflip will decide who goes first: ")
        if side not in possible_coinsides:
          print("\033[1m\nINVALID OPTION, MUST BE 'H' OR 'T'\n\033[0m")
          continue
        else:
          break

      if side == 'H':
        turn = heads
      else:
        turn = tails

      while True:
        p_mark = input("\nChoose either 'X' or 'O' as your mark: ")
        if p_mark not in possible_marks:
          print("\033[1m\nINVALID OPTION, MUST BE 'X' OR 'O'\033[0m")
          continue
        else:
          break

      if p_mark == 'O':
        comp_mark = 'X'
      else:
        comp_mark = 'O'

      for s in states:
        available_moves.append(s)

    #RETURNING UNFINISHED PLAYER
    elif all_data[player][1]["Unfinished"] != "None":
        print("Let's resume the unfinished game!\n")
        print(f'{player}\'s mark is {all_data[player][1]["Unfinished"]["Mark"]}\n')
        print(f'{player}\'s moves: ', end='')
        for move in all_data[player][1]["Unfinished"]["Moves"]:
            print(f'{move}, ', end='')
        print()
        print(f'Computer\'s moves: ', end='')
        for move in all_data[player][1]["Unfinished"]["ComputerMoves"]:
            print(f'{move}, ', end='')
        print()

        for move in all_data[player][1]["Unfinished"]["Moves"]:
          p_moves.append(move)

        for move in all_data[player][1]["Unfinished"]["ComputerMoves"]:
          comp_moves.append(move)

        p_mark = all_data[player][1]["Unfinished"]["Mark"]

        if p_mark == 'O':
          comp_mark = 'X'
        else:
          comp_mark = 'O'

        for move in p_moves:
          states[move] = p_mark

        for move in comp_moves:
          states[move] = comp_mark

        for move in states:
          if states[move] == ' ':
            available_moves.append(move)

        print("\033[1m\nUnfinished Board: \n")
        print("|-----------|")
        print("| " + states['0,0'] + " | " + states['0,1'] + " | " + states['0,2'] + " |")
        print("|-----------|")
        print("| " + states['1,0'] + " | " + states['1,1'] + " | " + states['1,2'] + " |")
        print("|-----------|")
        print("| " + states['2,0'] + " | " + states['2,1'] + " | " + states['2,2'] + " |")
        print("|-----------|\033[0m")

if turn == 0:
  print("\nComputer moves first!")

  c_m = random.choice(available_moves)
  print("Computer made move in " + c_m + "\n")

  comp_moves.append(c_m)
  available_moves.remove(c_m)

  for move in p_moves:
    states[move] = p_mark

  for move in comp_moves:
    states[move] = comp_mark

  print("\033[1m|-----------|")
  print("| " + states['0,0'] + " | " + states['0,1'] + " | " + states['0,2'] + " |")
  print("|-----------|")
  print("| " + states['1,0'] + " | " + states['1,1'] + " | " + states['1,2'] + " |")
  print("|-----------|")
  print("| " + states['2,0'] + " | " + states['2,1'] + " | " + states['2,2'] + " |")
  print("|-----------|\033[0m")

while True:
  print("\nAvailable Moves: ")
  print(available_moves)
  p_m = input("\nEnter " + player + "'s move (Enter ‘q’ to quit game): ")
  if p_m not in available_moves:
    if p_m == 'q':
      break
    print("\033[1m\nINVALID MOVE")
    print("This space is either occupied, or nonexistent!\033[0m")
    continue
  else:
    break

while p_m != 'q':
  p_moves.append(p_m)
  available_moves.remove(p_m)

  print(player + " made move in " + p_m + "\n")

  for move in p_moves:
    states[move] = p_mark

  for move in comp_moves:
    states[move] = comp_mark

  print("\033[1m|-----------|")
  print("| " + states['0,0'] + " | " + states['0,1'] + " | " + states['0,2'] + " |")
  print("|-----------|")
  print("| " + states['1,0'] + " | " + states['1,1'] + " | " + states['1,2'] + " |")
  print("|-----------|")
  print("| " + states['2,0'] + " | " + states['2,1'] + " | " + states['2,2'] + " |")
  print("|-----------|\n\033[0m")

  for winset in winsets:
    if all(value in p_moves for value in winset):
      print("\033[1m\n" + player + " WINS\033[0m")
      done = 1
      all_data[player][0]["Win"] += 1

  if not available_moves and done != 1:
    print("\033[1mDRAW\033[0m")
    all_data[player][0]["Draw"] += 1
    done = 1

  if done == 1:
    break

  c_m = random.choice(available_moves)
  print("Computer made move in " + c_m + "\n")

  comp_moves.append(c_m)
  available_moves.remove(c_m)

  print("Available Moves: ")
  print(available_moves)

  for move in p_moves:
    states[move] = p_mark

  for move in comp_moves:
    states[move] = comp_mark

  print("\033[1m\n|-----------|")
  print("| " + states['0,0'] + " | " + states['0,1'] + " | " + states['0,2'] + " |")
  print("|-----------|")
  print("| " + states['1,0'] + " | " + states['1,1'] + " | " + states['1,2'] + " |")
  print("|-----------|")
  print("| " + states['2,0'] + " | " + states['2,1'] + " | " + states['2,2'] + " |")
  print("|-----------|\n\033[0m")

  for winset in winsets:
    if all(value in comp_moves for value in winset):
      print("\033[1m\nCOMPUTER WINS")
      print(player + " LOST THE GAME\033[0m")
      done = 1
      all_data[player][0]["Loss"] += 1

  if not available_moves and done != 1:
    print("\033[1mDRAW\033[0m")
    all_data[player][0]["Draw"] += 1
    done = 1

  if done == 1:
    break

  while True:
    p_m = input("Enter " + player + "'s move (Enter ‘q’ to quit game): ")
    if p_m not in available_moves:
      if p_m == 'q':
        break
      print("\033[1m\nINVALID MOVE")
      print("This space is either occupied, or nonexistent!\n\033[0m")
      continue
    else:
      break

if done == 0: #(then we exited with 'q')
  unfin_dict = {'Mark': p_mark, 'Moves': p_moves, 'ComputerMoves': comp_moves}
  all_data[player][1]["Unfinished"] = unfin_dict
  print("\nGame saved. Come back and resume the game any time!\n")
else:
  all_data[player][1]["Unfinished"] = "None"
  print(f'\n{player}\'s game record so far is W{all_data[player][0]["Win"]}'+
          f'-L{all_data[player][0]["Loss"]}-D{all_data[player][0]["Draw"]}\n')

print("Have a good day!")

with open('/game_log.json', 'w') as f:
    json.dump(all_data, f, indent=4)